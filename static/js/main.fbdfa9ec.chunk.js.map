{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["socket","io","transports","App","React","useState","username","setUsername","message","setMessage","messages","setMessages","showModal","setShowModal","useEffect","console","log","on","msg","concat","toggleModal","className","style","backgroundColor","Navbar","variant","Brand","href","alt","src","width","height","display","justifyContent","paddingTop","padding","margin","border","position","id","listStyle","map","i","key","alignItems","marginTop","borderRadius","color","user","onSubmit","e","preventDefault","emit","bottom","background","autoComplete","value","onChange","currentTarget","flex","outline","paddingLeft","Button","type","icon","faPaperPlane","Modal","show","onHide","Header","Title","Body","Form","Group","Control","placeholder","target","Footer","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.fbdfa9ec.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Form, Modal, Button, Navbar } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons'\n\n\nimport io from \"socket.io-client\";\n\nconst connOpt = {\n  transports: [\"websocket\"],\n};\nlet socket = io(\"https://striveschool.herokuapp.com/\", connOpt);\n\n\nfunction App() {\n  const [username, setUsername] = React.useState(null);\n  const [message, setMessage] = React.useState(\"\");\n  const [messages, setMessages] = React.useState([]);\n  const [showModal, setShowModal] = React.useState(true);\n\n\n  React.useEffect(() => {\n    console.log(messages);\n    socket.on(\"bmsg\", (msg) => setMessages((messages) => messages.concat(msg)));\n  }, [socket]);\n\n  const handleMessage = (e) => {\n    setMessage(e.currentTarget.value);\n  };\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n\n    console.log(message);\n    if (message !== \"\") {\n      socket.emit(\"bmsg\", {\n        user: username,\n        message: message,\n      });\n      setMessage(\"\");\n    }\n  };\n\n\n\n\n  const toggleModal = () => {\n    setShowModal(!showModal)\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div className='row' style={{backgroundColor: '#293E4A'}}>  \n         <div className='container'>\n         <Navbar className='navbar-linked' variant=\"dark\">\n          <Navbar.Brand href=\"#home\">\n            <img\n              alt=\"\"\n              src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Linkedin.svg/600px-Linkedin.svg.png\"\n              width=\"30\"\n              height=\"30\"\n              className=\"d-inline-block align-top mr-3\"\n            />\n     LinkedIn Chat\n    </Navbar.Brand>\n        </Navbar>\n         </div>\n      </div>\n           \n      <div className='row no-gutters' style={{display: 'flex', justifyContent: 'center', paddingTop: '10px'}}>\n      <div className='col col-3' style={{height:'90vh', padding: '5px', margin: '3px', border: '1px solid #CECFD2'}}>\n      </div>\n  \n      <div className='col col-6' style={{ position: 'relative', height:'90vh', margin: '3px', border: '1px solid #CECFD2'}}>\n     \n   \n        <ul id=\"messages\" style={{  height:'93%', listStyle: \"none\", padding: \"40px\"}}>\n          {messages.map((msg, i) => (\n        \n       \n            <li key={i} style={{display: 'flex', justifyContent:'flex-start', alignItems: 'center', marginTop:'15px'}}>\n               <small style={{ backgroundColor : '#F5F5F5', padding: '10px 20px', width: '30%', borderRadius: '20px', color: '#000'}}>  {msg.message} </small>\n               <strong className='text-muted ml-3'>{msg.user}</strong> \n            </li>\n\n            \n          ))}\n        </ul>\n\n\n        <div>\n        <form\n          id=\"chat\"\n          onSubmit={sendMessage}\n          style={{\n            margin: '0 auto',\n            position: 'absolute', \n            bottom: '0',\n            width: \"100%\",\n            display: \"flex\",\n            padding: \"0.3rem\",\n            background: \"#293E4A\"\n          }}\n        >\n          <input\n            autoComplete=\"off\"\n            value={message}\n            onChange={handleMessage}\n            style={{ flex: \"1 0 auto\", outline: 0, paddingLeft: '8px'}}\n            className=\"rounded-0 border-0\"\n          />\n          <Button type=\"send\" className=\"rounded-0 btn-send\">\n             <FontAwesomeIcon icon={faPaperPlane} />\n          </Button>\n        </form>\n        </div>\n        <Modal show={showModal} onHide={toggleModal}>\n          <Modal.Header>\n            <Modal.Title>Hey, there !</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form.Group>\n              {/* <Form.Label>Hey, there !</Form.Label> */}\n              <Form.Control type=\"text\" placeholder=\"Enter your name\" onChange={(e) => setUsername(e.target.value)} />\n            </Form.Group>\n            <Modal.Footer>\n              <Button color=\"primary\" className=\"w-100\" onClick={toggleModal}>\n                Save\n          </Button>\n            </Modal.Footer>\n          </Modal.Body>\n        </Modal>\n\n\n      \n    </div>\n\n        <div className='col col-2' style={{padding: '5px', height:'90vh', margin: '3px', border: '1px solid #CECFD2'}}>\n       </div>\n\n       \n\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}